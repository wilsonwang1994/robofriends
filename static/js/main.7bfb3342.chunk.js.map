{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","Component","CardList","robots","map","user","i","key","SearchBox","searchChange","onSearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAgBeA,E,iLAZP,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,cACpB,6BACI,4BAAKF,KAAKC,MAAME,MAChB,2BAAIH,KAAKC,MAAMG,a,GAPhBC,aCiCJC,E,YA/BX,WAAYL,GAAQ,qEACVA,I,sEAaA,IACEM,EAAWP,KAAKC,MAAhBM,OACR,OACI,6BACKP,KAAKC,MAAMM,OAAOC,KAAI,SAACC,EAAMC,GAC1B,OAAO,kBAAC,EAAD,CACKC,IAAKJ,EAAOG,GAAGR,GACfA,GAAIK,EAAOG,GAAGR,GACdC,KAAMI,EAAOG,GAAGP,KAChBC,MAAOG,EAAOG,GAAGN,gB,GAxB1BC,aCkBRO,E,YAlBX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,aAAeZ,EAAMa,eAFX,E,sEAKf,OACI,yBAAKjB,UAAU,OACX,2BACIA,UAAU,mCACVkB,KAAK,SACLC,YAAY,gBACZC,SAAUjB,KAAKa,oB,GAZXR,aCQTa,EARA,SAACjB,GACZ,OACI,yBAAKkB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjErB,EAAMsB,WCsCJC,G,kBApCX,aAAe,IAAD,8BACV,+CAcJV,eAAiB,SAACW,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAd3C,EAAKC,MAAQ,CACTvB,OAAS,GACToB,YAAc,IAJR,E,iFAQO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEnB,OAAS4B,S,+BAQtC,IAAD,EAC2BnC,KAAK8B,MAA7BvB,EADH,EACGA,OAAQoB,EADX,EACWA,YACVS,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAMnC,KAAKoC,cAAcC,SAASb,EAAYY,kBAEzD,OACI,yBAAK1C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,eAAgBd,KAAKc,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUP,OAAQ6B,U,GA9BpB/B,cCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.7bfb3342.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n    render() {\n        return (\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img alt='robot' src={`https://robohash.org/${this.props.id}?200x200`}/>\n                <div>\n                    <h2>{this.props.name}</h2>\n                    <p>{this.props.email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Card from './Card';\n\nclass CardList extends Component {\n    constructor(props) {\n        super(props);\n        // this.robots = props.robots;\n    }\n\n    // cardArray = () => this.robots.map((user, i) => {\n    //     return <Card\n    //                 key={this.robots[i].id}\n    //                 id={this.robots[i].id}\n    //                 name={this.robots[i].name}\n    //                 email={this.robots[i].email}\n    //             />;\n    // });\n\n    render() {\n        const { robots } = this.props;\n        return (\n            <div>\n                {this.props.robots.map((user, i) => {\n                    return <Card\n                                key={robots[i].id}\n                                id={robots[i].id}\n                                name={robots[i].name}\n                                email={robots[i].email}\n                            />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\n\nclass SearchBox extends Component {\n    constructor(props) {\n        super(props);\n        this.searchChange = props.onSearchChange;\n    }\n    render() {\n        return (\n            <div className='pa2'>\n                <input\n                    className='pa3 ba b--green bg-lightest-blue'\n                    type='search'\n                    placeholder='search robots'\n                    onChange={this.searchChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll\n","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots : [],\n            searchfield : ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots : users }));\n\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield : event.target.value });\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n        return (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox onSearchChange={this.onSearchChange} />\n                <Scroll>\n                    <CardList robots={filteredRobots} />\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}